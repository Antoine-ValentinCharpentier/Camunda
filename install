
# Définition des informations de connexion au Keycloak

...


Pour faciliter le déploiement de BPMN via le Web Modeler, la charte Camunda propose des propriétés à renseigner. Cela permet d’éviter à l’utilisateur de devoir les saisir à chaque déploiement d’un BPMN via l’interface du Web Modeler.

Une grande partie de cette configuration a déjà été réalisée dans le fichier fourni. Il reste cependant à y renseigner l’URL du token endpoint de Keycloak pour le realm Camunda qui sera créé.

Veuillez l’indiquer à cet emplacement :

```
webModeler:
  restapi:
    clusters:
      - oauth:
          url: https://<KEYCLOAK_HOST>/realms/camunda/protocol/openid-connect/token    # le token URL
```

# Définitions des informations de connexion au Postgresql

Nous allons voir comment configurer la connexion à la base de données PostgreSQL utilisée par le Camunda Web Modeler, afin de permettre au modeleur de stocker et récupérer les définitions de processus BPMN directement dans la base de données. 

À noter que si vous ne disposez pas d’un PostgreSQL dédié pour Camunda, nous vous proposons, en Annexe 3, une ressource pour l’installer directement sur Kubernetes.

Pour ce faire, vous pouvez configurer les informations de connexions dans la section webModeler.restapi.externalDatabase du fichier de configuration.

```
webModeler:
  restapi:
    externalDatabase:
      host: "postgres.example.com"        # L’hôte de votre instance PostgreSQL 
      port: 5432                          # Le port PostgreSQL (par défaut 5432)
      database: "web-modeler"             # Le nom de la base de données
      user: "webmodeler_user"             # L’utilisateur de la base de données
```

Vous verrez à cet emplacement la référence à un Secret postgresql-secret, utilisé pour stocker le mot de passe de l’utilisateur chargé d’interagir avec la base de données, sous la clé password. Vous le pouvez le créer à l'aide de la commande :
```
kubectl create secret generic postgresql-secret \
  --from-literal=password=VeryLongString \
  -n <NAMESPACE_CAMUNDA>
```

# Configuration des secrets d'identity

Il est fortement recommandé de pré-créer les secrets d’identité utilisés par les différents composants de Camunda. Cela permet d’éviter que ces secrets soient automatiquement régénérés lors d’une future mise à jour avec helm upgrade.

Pour ce faire, vous devez créer un secret nommé identity-secret-for-components, contenant les clés attendues par chaque composant (mentionnées dans l'exemple de commande). Vous êtes libre de définir les valeurs des secrets (par exemple, des chaînes aléatoires sécurisées).

Exemple de commande pour créer ce secret dans le namespace :

//TODO : update les clés 
```
kubectl create secret generic identity-secret-for-components \
  --from-literal=operate-secret=VeryLongString \
  --from-literal=tasklist-secret=VeryLongString \
  --from-literal=optimize-secret=VeryLongString \
  --from-literal=connectors-secret=VeryLongString \
  --from-literal=console-secret=VeryLongString \
  --from-literal=keycloak-secret=VeryLongString \
  --from-literal=zeebe-secret=VeryLongString \
  --from-literal=smtp-password=VeryLongString \
  -n <NAMESPACE_CAMUNDA>
```
À noter que le smtp-password n’est en réalité pas utilisé par le Web Modeler. Ainsi, la valeur renseignée n’a pas d’importance pour le déploiement.

Aucune modification du fichier de configuration n’est nécessaire, car ce secret est déjà référencé dans le fichier fourni.

# Configuration de l’utilisateur par défaut

Nous allons maintenant configurer le premier utilisateur de Camunda, qui servira à accéder aux différentes interfaces.
Vous pouvez personnaliser son nom d’utilisateur et son adresse e-mail en modifiant le fichier de configuration aux clés suivantes :

```
identity:
  firstUser:
    username: demo
    email: demo@example.org
```

Pour définir le mot de passe de cet utilisateur, il est recommandé d’utiliser un secret Kubernetes nommé firstuser, contenant la clé password.

Vous pouvez le créer avec la commande suivante, en remplaçant `<CHANGE_ME>` par le mot de passe de votre choix :

```
kubectl create secret generic firstuser \
  --from-literal=password=<CHANGE_ME> \
  -n <NAMESPACE_CAMUNDA>
```
Vous n’avez pas besoin de modifier le fichier de configuration pour référencer ce secret, car cela a déjà été pris en compte dans le fichier values.yaml fourni.

# Déploiement de Camunda

Nous allons maintenant voir comment exploiter le fichier de configuration que nous avons précédemment créé et modifié, nommé values.yml.

Ouvrez un terminal disposant de kubectl et Helm, déjà connecté à votre cluster Kubernetes.

Placez-vous dans le répertoire où se trouve le fichier de configuration précedemment modifié.

Ajoutez le dépôt Helm officiel de Camunda.
```
helm repo add camunda https://helm.camunda.io
helm repo update
```
Lancez l’installation en spécifiant le namespace dans lequel le déploiement sera effectué.
```
helm install camunda camunda/camunda-platform \ 
  --namespace <NAMESPACE_CAMUNDA> \ 
  --version 12.0.1 \ 
  -f values.yml
```
# Vérifier le déploiement

Vérifiez que tous les pods sont prêts dans le namespace de Camunda.

kubectl get pods -n <NAMESPACE_CAMUNDA>

# Annexe n°3

Si vous souhaitez installer un PostgreSQL dédié au Web Modeler dans le namespace de Camunda, vous pouvez vous référer à cette annexe.

Il vous faudra créer un Secret nommé postgresql-secret contenant trois clés :
```
kubectl create secret generic firstuser \
  --from-literal=username=<CHANGE_ME_NOM_DE_L_UTILISATEUR> \
  --from-literal=password=<CHANGE_ME_MOT_DE_PASSE> \
  --from-literal=database=<CHANGE_ME_NOM_BASE_DE_DONNEES> \
  -n <NAMESPACE_CAMUNDA>
```

Vous devez enregistrer le manifeste suivant dans le fichier postgresql.yml. Ce dernier a été configuré pour utiliser le Secret précédemment créé et exploiter des PersistentVolumeClaims Ceph‑Block.

//TODO
```

```

À noter que si vous suivez cette étape, vous n’aurez pas besoin de créer un nouveau secret pour la connexion du Web Modeler à PostgreSQL, car il utilisera le même Secret créé dans cette annexe.

De plus, les informations de connexion du Web Modeler pour accéder à ce PostgreSQL sont les suivantes :
- Host : postgresql-0
- Port : 5432
- Database : la valeur de la clé database dans le Secret postgresql-secret
- User : la valeur de la clé database dans le Secret postgresql-secret
