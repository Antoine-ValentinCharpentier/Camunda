
# Définition des informations de connexion au Keycloak

...


Pour faciliter le déploiement de BPMN via le Web Modeler, la charte Camunda propose des propriétés à renseigner. Cela permet d’éviter à l’utilisateur de devoir les saisir à chaque déploiement d’un BPMN via l’interface du Web Modeler.

Une grande partie de cette configuration a déjà été réalisée dans le fichier fourni. Il reste cependant à y renseigner l’URL du token endpoint de Keycloak pour le realm Camunda qui sera créé.

Veuillez l’indiquer à cet emplacement :

```
webModeler:
  restapi:
    clusters:
      - oauth:
          url: https://<KEYCLOAK_HOST>/realms/camunda/protocol/openid-connect/token    # le token URL
```

# Définitions des informations de connexion au Postgresql

Nous allons 

# Configuration des secrets d'identity

Il est fortement recommandé de pré-créer les secrets d’identité utilisés par les différents composants de Camunda. Cela permet d’éviter que ces secrets soient automatiquement régénérés lors d’une future mise à jour avec helm upgrade.

Pour ce faire, vous devez créer un secret nommé identity-secret-for-components, contenant les clés attendues par chaque composant (mentionnées dans l'exemple de commande). Vous êtes libre de définir les valeurs des secrets (par exemple, des chaînes aléatoires sécurisées).

Exemple de commande pour créer ce secret dans le namespace :

//TODO : update les clés 
```
kubectl create secret generic identity-secret-for-components \
  --from-literal=operate-secret=VeryLongString \
  --from-literal=tasklist-secret=VeryLongString \
  --from-literal=optimize-secret=VeryLongString \
  --from-literal=connectors-secret=VeryLongString \
  --from-literal=console-secret=VeryLongString \
  --from-literal=keycloak-secret=VeryLongString \
  --from-literal=zeebe-secret=VeryLongString \
  -n <NAMESPACE_CAMUNDA>
```

Aucune modification du fichier de configuration n’est nécessaire, car ce secret est déjà référencé dans le fichier fourni.

# Configuration de l’utilisateur par défaut

Nous allons maintenant configurer le premier utilisateur de Camunda, qui servira à accéder aux différentes interfaces.
Vous pouvez personnaliser son nom d’utilisateur et son adresse e-mail en modifiant le fichier de configuration aux clés suivantes :

```
identity:
  firstUser:
    username: demo
    email: demo@example.org
```

Pour définir le mot de passe de cet utilisateur, il est recommandé d’utiliser un secret Kubernetes nommé firstuser, contenant la clé password.

Vous pouvez le créer avec la commande suivante, en remplaçant `<CHANGE_ME>` par le mot de passe de votre choix :

```
kubectl create secret generic firstuser \
  --from-literal=password=<CHANGE_ME> \
  -n <NAMESPACE_CAMUNDA>
```
Vous n’avez pas besoin de modifier le fichier de configuration pour référencer ce secret, car cela a déjà été pris en compte dans le fichier values.yaml fourni.

# Déploiement de Camunda

Nous allons maintenant voir comment exploiter le fichier de configuration que nous avons précédemment créé et modifié, nommé values.yml.

Ouvrez un terminal disposant de kubectl et Helm, déjà connecté à votre cluster Kubernetes.

Placez-vous dans le répertoire où se trouve le fichier de configuration précedemment modifié.

Ajoutez le dépôt Helm officiel de Camunda.
```
helm repo add camunda https://helm.camunda.io
helm repo update
```
Lancez l’installation en spécifiant le namespace dans lequel le déploiement sera effectué.
```
helm install camunda camunda/camunda-platform \ 
  --namespace <NAMESPACE_CAMUNDA> \ 
  --version 12.0.1 \ 
  -f values.yml
```
# Vérifier le déploiement

Vérifiez que tous les pods sont prêts dans le namespace de Camunda.

kubectl get pods -n <NAMESPACE_CAMUNDA>
